// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BalanceRepository is an autogenerated mock type for the BalanceRepository type
type BalanceRepository struct {
	mock.Mock
}

// GetBalance provides a mock function with given fields: ctx, userID
func (_m *BalanceRepository) GetBalance(ctx context.Context, userID uint) (float64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (float64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) float64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBalance provides a mock function with given fields: ctx, userID, newBalance
func (_m *BalanceRepository) UpdateBalance(ctx context.Context, userID uint, newBalance float64) error {
	ret := _m.Called(ctx, userID, newBalance)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, float64) error); ok {
		r0 = rf(ctx, userID, newBalance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBalanceRepository creates a new instance of BalanceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBalanceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BalanceRepository {
	mock := &BalanceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
